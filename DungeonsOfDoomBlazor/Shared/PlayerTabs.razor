@using DungeonsOfDoomBlazor.GameEngine.Models.Quests;

<Tabs SelectedTab="@_selectedTab" Pills="true" SelectedTabChanged="OnSelectedTabChanged">
    <Items>
        <Tab Name="inventory">Inventory</Tab>
        <Tab Name="quests">Quests</Tab>
        <Tab Name="recipes">Recipes</Tab>
    </Items>
    <Content>
        <TabPanel Name="inventory">
            <div class="table-wrapper-scroll-y my-custom-scrollbar">
                <Table Bordered="true" Hoverable="true" Narrow="true" Striped="true"
                       Style="background-color: white">
                    <TableHeader>
                        <TableRowCell>Name</TableRowCell>
                        <TableRowCell>Qty</TableRowCell>
                        @*if weapon*@
                        @*<TableRowCell>Attack</TableRowCell>*@
                        @*<TableRowCell>Defense</TableRowCell>*@
                        <TableRowCell>$</TableRowCell>
                    </TableHeader>
                    <TableBody>
                        @foreach (var item in Player.Inventory.GroupedItems)
                        {
                            <TableRow>
                                <TableRowCell>@item.Item.Name</TableRowCell>
                                <TableRowCell>@item.Quantity</TableRowCell>
                                @*<TableRowCell>@item.Item.MinDamage - @item.Item.MaxDamage</TableRowCell>*@
                                <TableRowCell>@item.Item.Price</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </div>
        </TabPanel>
        <TabPanel Name="quests">
            <div class="table-wrapper-scroll-y my-custom-scrollbar">
                <Table Bordered="true" Hoverable="true" Narrow="true" Striped="true"
                       Style="background-color: white">
                    <TableHeader>
                        <TableRowCell>Name</TableRowCell>
                        <TableRowCell>Done?</TableRowCell>
                    </TableHeader>
                    <TableBody>
                        @foreach (var quest in Player.Quests)
                        {
                            <TableRow>
                                <TableRowCell id="quest-name-cell" Style="cursor:pointer" Clicked="() => OnQuestClicked(quest.PlayerQuest)">
                                    @quest.PlayerQuest.Name
                                </TableRowCell>
                                <TableRowCell>@(quest.IsCompleted ? "Yes" : "No")</TableRowCell>
                                </TableRow>
                        }
                    </TableBody>
                </Table>
            </div>
        </TabPanel>
        <TabPanel Name="recipes">
            <div class="table-wrapper-scroll-y my-custom-scrollbar">
                <Table Bordered="true" Hoverable="true" Narrow="true" Striped="true"
                       Style="background-color: white">
                    <TableHeader>
                        <TableRowCell>Name</TableRowCell>
                        <TableRowCell></TableRowCell>
                    </TableHeader>
                    <TableBody>
                        @foreach (var recipe in Player.Recipes)
                        {
                            <TableRow>
                                <TableRowCell id="recipe-name-cell" Style="cursor: pointer" Clicked="() => OnRecipeClicked(recipe)">
                                    @recipe.Name
                                </TableRowCell>
                                <TableRowCell>
                                    <Blazorise.Button id="craft-item-btn" Size="Size.Small" Color="Color.Secondary"
                                                  Outline="true" Clicked="() => CraftItemClicked.InvokeAsync(recipe)">
                                        Craft
                                    </Blazorise.Button>
                                </TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </div>
        </TabPanel>
    </Content>
</Tabs>

@code {
    private string _selectedTab = "inventory";
    [Parameter]
    public EventCallback<DisplayMessage> DisplayMessagesCreated { get; set; }

    [Parameter]
    public EventCallback<Recipe> CraftItemClicked { get; set; }

    [Parameter]
    public Player Player { get; set; } = Player.Empty;

    public void OnSelectedTabChanged(string newTab)
    {
        _selectedTab = newTab;
    }
    private void OnQuestClicked(Quest quest) => DisplayMessagesCreated.InvokeAsync(quest.ToDisplayMessage());
    private void OnRecipeClicked(Recipe recipe) => DisplayMessagesCreated.InvokeAsync(recipe.ToDisplayMessage());

}
